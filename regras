/* Syntax convention
clear
*/
/* Rules declared like name ={ ... } */
/* Reserved keywords like #name */
/* Identificators like $id */
/* Classes of tokens like %rulename */
/* Subrules invoked by @rulename */

program ={
    #program $id #;
    @escopo_de_subprograma
    #.
}

declaracoes_variaveis ={
    #var @lista_declaracoes_variaveis
|   £
}

lista_declaracoes_variaveis ={
    @lista_de_identificadores #: @tipo #; @lista_declaracoes_variaveis_linha
}

lista_declaracoes_variaveis_linha ={
    @lista_de_identificadores #: @tipo #; @lista_declaracoes_variaveis_linha
|   £
}

lista_de_identificadores ={
    $id @lista_de_identificadores_linha
}

lista_de_identificadores_linha ={
    #, $id @lista_de_identificadores_linha
|   £
}

tipo ={
    #integer
|   #real
|   #boolean
}

declaracoes_de_subprogramas ={
    @declaracao_de_subprograma #; @declaracoes_de_subprogramas
|   £
}

declaracao_de_subprograma ={
    #procedure $id @argumentos #;
    @escopo_de_subprograma
|   #function $id @argumentos #: @tipo #;
    @escopo_de_subprograma
}

escopo_de_subprograma ={
    @declaracoes_variaveis
    @declaracoes_de_subprogramas
    @comando_composto
}

argumentos ={
    #( @lista_de_parametros #)
|   £
}

lista_de_parametros ={
    @lista_de_identificadores #: @tipo @lista_de_parametros_linha
}

lista_de_parametros_linha ={
    #; @lista_de_identificadores #: @tipo @lista_de_parametros_linha
|   £
}

comando_composto ={
    #begin
    @comandos_opcionais
    #end
}

comandos_opcionais ={
    @lista_de_comandos 
|   £
}

lista_de_comandos ={
    @comando @lista_de_comandos_int
}

lista_de_comandos_int ={
    #; @lista_de_comandos_linha
|   £
}

lista_de_comandos_linha ={
    @comando #; @lista_de_comandos_linha
|   £
}

comando ={
    @uso_identificador
|   @comando_composto
|   #if @expressao:boolean #then @comando @parte_else
|   #while @expressao:boolean #do @comando
}

uso_identificador ={
    $id:T @uso_identificador_term:T?
}

uso_identificador_term ={
    @atribuicao_variavel:T => T
|   @ativacao_de_procedimento
}

atribuicao_variavel ={
    #:= @expressao:T => T
}

variavel ={
    $id
}

ativacao_de_procedimento ={
    #( @lista_de_expressoes #)
|   £
}

parte_else ={
    #else @comando
|   £
}

lista_de_expressoes ={
    @expressao @lista_de_expressoes_linha
}

lista_de_expressoes_linha ={
    #, @expressao @lista_de_expressoes_linha
|   £
}

/* Não é necessário especializar expressao. expressao_term já faz as verificações necessárias. */
expressao ={
    @expressao_simples @expressao_term
}

expressao_term ={
    @op_relacional @expressao_simples:Number => Number
|   @op_relacional_ig @expressao_simples:T => T
|   £
}

expressao_simples ={
    @termo:T @expressao_simples_linha:T => T
|   @sinal @termo:Number @expressao_simples_linha:Number => Number
}

expressao_simples_linha ={
    @op_aditivo @termo:Number @expressao_simples_linha:Number => Number
|   @op_aditivo_or @termo:boolean @expressao_simples_linha:boolean => boolean
|   £
}

termo ={
    @fator:T @termo_linha:T => T
}

termo_linha ={
    @op_multiplicativo @fator:Number @termo_linha:Number => Number
|   @op_multiplicativo_and @fator:boolean @termo_linha:boolean => boolean
|   £
}

fator ={
    $id:T @ativacao_de_procedimento => T
|   %inteiro => integer
|   %real
|   #true => boolean
|   #false => boolean
|   #( @expressao:T #) => T
|   #not @fator:boolean => boolean
}

sinal ={
    #+ | #-
}

op_relacional ={
    #< | #> | #<= | #>=
}

op_relacional_ig ={
    #= | #<>
}

op_aditivo ={
    #+ | #-
}

op_aditivo_or ={
    #or
}

op_multiplicativo ={
    #* | #/
}

op_multiplicativo_and ={
    #and
}

